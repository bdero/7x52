{"version":3,"sources":["src\\math.ts","src\\color.ts","src\\constants.ts","src\\grid.ts","src\\input.ts","src\\render.ts","src\\init.ts","src\\index.ts"],"names":[],"mappings":"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","file":"src.dcbced2c.map","sourceRoot":"..","sourcesContent":["function lerp(a : number, b : number, alpha : number) : number {\n    return a + (b - a)*alpha\n}\n\nexport {\n    lerp\n}\n","import {lerp} from './math'\n\nclass Color {\n    r : number\n    g : number\n    b : number\n    a? : number\n\n    constructor(r : number, g : number, b : number, a? : number) {\n        this.r = r\n        this.g = g\n        this.b = b\n        this.a = a\n    }\n\n    public toString() : string {\n        if (this.a == undefined) {\n            return `rgb(${this.r},${this.g},${this.b})`\n        }\n        return `rgba(${this.r},${this.g},${this.b},${this.a})`\n    }\n\n    public static lerp(a : Color, b : Color, alpha : number) : Color {\n        return new Color(\n            lerp(a.r, b.r, alpha),\n            lerp(a.g, b.g, alpha),\n            lerp(a.b, b.b, alpha),\n            a.a != undefined && b.a != undefined ? lerp(a.a, b.a, alpha) : undefined,\n        )\n    }\n\n    public static random(alpha : boolean = false) : Color {\n        return new Color(\n            Math.random()*255, Math.random()*255, Math.random()*255,\n            alpha ? Math.random()*255 : undefined\n        )\n    }\n\n    static readonly White = new Color(255, 255, 255)\n    static readonly Black = new Color(0, 0, 0)\n}\n\nexport default Color\n","import Color from './color'\n\nconst SQUARE_SIZE = 20 // Pixels\nconst GRID_WIDTH = 52\nconst GRID_HEIGHT = 7\nconst GRID_UNIT_MARGIN = 2\n\nconst COLOR_OFF = new Color(100, 100, 100)\nconst COLOR_ON = new Color(200, 200, 200)\n\nexport {\n    SQUARE_SIZE, GRID_WIDTH, GRID_HEIGHT, GRID_UNIT_MARGIN,\n    COLOR_OFF,\n    COLOR_ON\n}\n","import {GRID_HEIGHT, GRID_WIDTH} from './constants'\n\ninterface GridUnit {\n    x : number\n    y : number\n    saturation : number // Between 0 and 1\n}\n\nclass Grid {\n    private units : GridUnit[]\n\n    public constructor() {\n        this.units = []\n        for (let i = 0; i < GRID_HEIGHT*GRID_WIDTH; i++) {\n            this.units[i] = {\n                x: i%GRID_WIDTH,\n                y: Math.floor(i/GRID_WIDTH),\n                saturation: 0\n            }\n        }\n    }\n\n    public getUnit(x : number, y : number) : GridUnit {\n        return this.units[y*GRID_WIDTH + x]\n    }\n\n    public getUnits() : GridUnit[] {\n        return this.units\n    }\n}\n\nconst gridInstance = new Grid()\n\nexport {\n    gridInstance as grid,\n    GridUnit\n}\n","interface Mouse {\n    x : number\n    y : number\n    left : boolean\n    right : boolean\n}\n\ninterface Keys {\n    shift : boolean\n}\n\nconst mouse : Mouse = {\n    x : -1, y : -1,\n    left : false,\n    right : false\n}\n\nconst keys : Keys = {shift: false}\n\nfunction registerInputEvents(canvas : HTMLCanvasElement) : void {\n    window.addEventListener('mousemove', (event : MouseEvent) => {\n        const rect = canvas.getBoundingClientRect()\n        mouse.x = event.clientX - rect.left\n        mouse.y = event.clientY - rect.top\n\n        keys.shift = event.shiftKey\n    })\n\n    window.addEventListener('mousedown', (event : MouseEvent) => {\n        if (event.button == 2) {\n            mouse.right = true\n        } else {\n            mouse.left = true\n        }\n    })\n    window.addEventListener('mouseup', (event : MouseEvent) => {\n        if (event.button == 2) {\n            mouse.right = false\n        } else {\n            mouse.left = false\n        }\n    })\n\n    canvas.addEventListener(\"contextmenu\", (event : Event) => {\n        // Absorb secondary clicks on the canvas (since we use it for erasing)\n        event.preventDefault()\n    })\n\n    window.addEventListener('keydown', (event : KeyboardEvent) => {\n        keys.shift = event.shiftKey\n    })\n    window.addEventListener('keyup', (event : KeyboardEvent) => {\n        keys.shift = event.shiftKey\n    })\n}\n\nexport { mouse, keys, registerInputEvents }\n","import {\n    GRID_HEIGHT, GRID_WIDTH, SQUARE_SIZE, GRID_UNIT_MARGIN,\n    COLOR_OFF, COLOR_ON\n} from './constants'\nimport Color from './color'\nimport {grid, GridUnit} from './grid'\nimport {mouse, keys} from './input'\n\n\nlet context : CanvasRenderingContext2D\n\nfunction drawGridSquare(x : number, y : number, color : Color, margin : number = 0) {\n    const xloc = x*SQUARE_SIZE\n    const yloc = y*SQUARE_SIZE\n    context.fillStyle = color.toString()\n    context.fillRect(\n        xloc + margin,\n        yloc + margin,\n        SQUARE_SIZE - margin*2,\n        SQUARE_SIZE - margin*2\n    )\n}\n\nconst render : FrameRequestCallback = () : void => {\n    // Background color\n    context.fillStyle = new Color(0, 0, 0, 0.06).toString()\n    context.fillRect(0, 0, context.canvas.width, context.canvas.height)\n\n    // Grid Selection\n    const selectX = Math.floor(mouse.x/SQUARE_SIZE)\n    const selectY = Math.floor(mouse.y/SQUARE_SIZE)\n    if (selectX >= 0 && selectY >= 0 && selectX < GRID_WIDTH && selectY < GRID_HEIGHT) {\n        drawGridSquare(selectX, selectY, Color.White)\n\n        const selectedUnit = grid.getUnit(selectX, selectY)\n        if (mouse.left) {\n            selectedUnit.saturation = keys.shift ? 0 : 1\n        } else if (mouse.right) {\n            selectedUnit.saturation = 0\n        }\n    }\n\n    // Grid cells\n    for (let y = 0; y < GRID_HEIGHT; y++) {\n        for (let x = 0; x < GRID_WIDTH; x++) {\n            const unit = grid.getUnit(x, y)\n            drawGridSquare(\n                x, y,\n                Color.lerp(COLOR_OFF, COLOR_ON, unit.saturation),\n                GRID_UNIT_MARGIN\n            )\n        }\n    }\n    window.requestAnimationFrame(render)\n}\n\nfunction beginRender(canvas : HTMLCanvasElement) : void {\n    const ctx = canvas.getContext(\"2d\")\n    if (ctx == null) {\n        window.alert(\"The HTML5 canvas could not be initialized. :(\")\n        return\n    }\n    context = ctx\n\n    window.requestAnimationFrame(render)\n}\n\nfunction clearGrid() : void {\n    for (const x of grid.getUnits()) {\n        x.saturation = 0\n    }\n\n    context.fillStyle = Color.White.toString()\n    context.fillRect(0, 0, context.canvas.width, context.canvas.height)\n}\n\nexport {beginRender, clearGrid}\n","import {GRID_HEIGHT, GRID_WIDTH, SQUARE_SIZE} from './constants'\nimport {beginRender, clearGrid} from './render'\nimport {registerInputEvents} from './input'\n\nfunction select(id : string) : HTMLElement | null {\n    return document.querySelector(id)\n}\n\nconst init : EventListener = () : void => {\n    const canvas = <HTMLCanvasElement> select('#gridcanvas')\n    canvas.width = SQUARE_SIZE*GRID_WIDTH\n    canvas.height = SQUARE_SIZE*GRID_HEIGHT\n\n    const clearButton = <HTMLButtonElement> select('#clearbutton')\n    clearButton.onclick = () => {\n        clearGrid()\n    }\n\n    registerInputEvents(canvas)\n    beginRender(canvas)\n}\n\nexport default init\n","import init from './init'\n\nwindow.addEventListener('DOMContentLoaded', init)\n"]}