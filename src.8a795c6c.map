{"version":3,"sources":["src\\math.ts","src\\color.ts","src\\constants.ts","src\\grid.ts","src\\input.ts","src\\render.ts","src\\init.ts","src\\index.ts"],"names":[],"mappings":"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","file":"src.8a795c6c.map","sourceRoot":"..","sourcesContent":["function lerp(a : number, b : number, alpha : number) : number {\n    return a + (b - a)*alpha\n}\n\nexport {\n    lerp\n}\n","import {lerp} from './math'\n\nclass Color {\n    r : number\n    g : number\n    b : number\n    a? : number\n\n    constructor(r : number, g : number, b : number, a? : number) {\n        this.r = r\n        this.g = g\n        this.b = b\n        this.a = a\n    }\n\n    public toString() : string {\n        if (this.a == undefined) {\n            return `rgb(${this.r},${this.g},${this.b})`\n        }\n        return `rgba(${this.r},${this.g},${this.b},${this.a})`\n    }\n\n    public static lerp(a : Color, b : Color, alpha : number) : Color {\n        return new Color(\n            lerp(a.r, b.r, alpha),\n            lerp(a.g, b.g, alpha),\n            lerp(a.b, b.b, alpha),\n            a.a != undefined && b.a != undefined ? lerp(a.a, b.a, alpha) : undefined,\n        )\n    }\n\n    public static random(alpha : boolean = false) : Color {\n        return new Color(\n            Math.random()*255, Math.random()*255, Math.random()*255,\n            alpha ? Math.random()*255 : undefined\n        )\n    }\n\n    static readonly White = new Color(255, 255, 255)\n    static readonly Black = new Color(0, 0, 0)\n}\n\nexport default Color\n","import Color from './color'\n\nconst SQUARE_SIZE = 20 // Pixels\nconst GRID_WIDTH = 52\nconst GRID_HEIGHT = 7\nconst GRID_UNIT_MARGIN = 2\n\nconst COLOR_OFF = new Color(100, 100, 100)\nconst COLOR_ON = new Color(200, 200, 200)\n\nexport {\n    SQUARE_SIZE, GRID_WIDTH, GRID_HEIGHT, GRID_UNIT_MARGIN,\n    COLOR_OFF,\n    COLOR_ON\n}\n","import {GRID_HEIGHT, GRID_WIDTH} from './constants'\n\ninterface GridUnit {\n    x : number\n    y : number\n    saturation : number // Between 0 and 1\n}\n\nclass Grid {\n    private units : GridUnit[]\n\n    public constructor() {\n        this.units = []\n        for (let i = 0; i < GRID_HEIGHT*GRID_WIDTH; i++) {\n            this.units[i] = {\n                x: i%GRID_WIDTH,\n                y: Math.floor(i/GRID_WIDTH),\n                saturation: 0\n            }\n        }\n    }\n\n    public getUnit(x : number, y : number) : GridUnit {\n        return this.units[y*GRID_WIDTH + x]\n    }\n\n    public getUnits() : GridUnit[] {\n        return this.units\n    }\n}\n\nconst gridInstance = new Grid()\n\nexport {\n    gridInstance as grid,\n    GridUnit\n}\n","interface Mouse {\n    x : number\n    y : number\n    left : boolean\n    right : boolean\n}\n\ninterface Keys {\n    shift : boolean\n}\n\nconst mouse : Mouse = {\n    x : -1, y : -1,\n    left : false,\n    right : false\n}\n\nconst keys : Keys = {shift: false}\n\nfunction registerInputEvents(canvas : HTMLCanvasElement) : void {\n    window.addEventListener('mousemove', (event : MouseEvent) => {\n        const rect = canvas.getBoundingClientRect()\n        mouse.x = event.clientX - rect.left\n        mouse.y = event.clientY - rect.top\n\n        keys.shift = event.shiftKey\n    })\n\n    window.addEventListener('mousedown', (event : MouseEvent) => {\n        if (event.button == 2) {\n            mouse.right = true\n        } else {\n            mouse.left = true\n        }\n    })\n    window.addEventListener('mouseup', (event : MouseEvent) => {\n        if (event.button == 2) {\n            mouse.right = false\n        } else {\n            mouse.left = false\n        }\n    })\n\n    canvas.addEventListener(\"contextmenu\", (event : Event) => {\n        // Absorb secondary clicks on the canvas (since we use it for erasing)\n        event.preventDefault()\n    })\n\n    window.addEventListener('keydown', (event : KeyboardEvent) => {\n        keys.shift = event.shiftKey\n    })\n    window.addEventListener('keyup', (event : KeyboardEvent) => {\n        keys.shift = event.shiftKey\n    })\n}\n\nexport { mouse, keys, registerInputEvents }\n","import {\n    GRID_HEIGHT, GRID_WIDTH, SQUARE_SIZE, GRID_UNIT_MARGIN,\n    COLOR_OFF, COLOR_ON\n} from './constants'\nimport Color from './color'\nimport {grid, GridUnit} from './grid'\nimport {mouse, keys} from './input'\n\n\nlet context : CanvasRenderingContext2D\n\nfunction drawGridSquare(x : number, y : number, color : Color, margin : number = 0) {\n    const xloc = x*SQUARE_SIZE\n    const yloc = y*SQUARE_SIZE\n    context.fillStyle = color.toString()\n    context.fillRect(\n        xloc + margin,\n        yloc + margin,\n        SQUARE_SIZE - margin*2,\n        SQUARE_SIZE - margin*2\n    )\n}\n\nconst render : FrameRequestCallback = () : void => {\n    // Background color\n    context.fillStyle = new Color(0, 0, 0, 0.06).toString()\n    context.fillRect(0, 0, context.canvas.width, context.canvas.height)\n\n    // Grid Selection\n    const selectX = Math.floor(mouse.x/SQUARE_SIZE)\n    const selectY = Math.floor(mouse.y/SQUARE_SIZE)\n    if (selectX >= 0 && selectY >= 0 && selectX < GRID_WIDTH && selectY < GRID_HEIGHT) {\n        drawGridSquare(selectX, selectY, Color.White)\n\n        const selectedUnit = grid.getUnit(selectX, selectY)\n        if (mouse.left) {\n            selectedUnit.saturation = keys.shift ? 0 : 1\n        } else if (mouse.right) {\n            selectedUnit.saturation = 0\n        }\n    }\n\n    // Grid cells\n    for (let y = 0; y < GRID_HEIGHT; y++) {\n        for (let x = 0; x < GRID_WIDTH; x++) {\n            const unit = grid.getUnit(x, y)\n            drawGridSquare(\n                x, y,\n                Color.lerp(COLOR_OFF, COLOR_ON, unit.saturation),\n                GRID_UNIT_MARGIN\n            )\n        }\n    }\n    window.requestAnimationFrame(render)\n}\n\nfunction beginRender(canvas : HTMLCanvasElement) : void {\n    const ctx = canvas.getContext(\"2d\")\n    if (ctx == null) {\n        window.alert(\"The HTML5 canvas could not be initialized. :(\")\n        return\n    }\n    context = ctx\n\n    window.requestAnimationFrame(render)\n}\n\nfunction clearGrid() : void {\n    for (const x of grid.getUnits()) {\n        x.saturation = 0\n    }\n\n    context.fillStyle = Color.White.toString()\n    context.fillRect(0, 0, context.canvas.width, context.canvas.height)\n}\n\nexport {beginRender, clearGrid}\n","import {GRID_HEIGHT, GRID_WIDTH, SQUARE_SIZE} from './constants'\nimport {beginRender, clearGrid} from './render'\nimport {registerInputEvents} from './input'\n\nfunction select(id : string) : HTMLElement | null {\n    return document.querySelector(id)\n}\n\nconst init : EventListener = () : void => {\n    const canvas = <HTMLCanvasElement> select('#gridcanvas')\n    canvas.width = SQUARE_SIZE*GRID_WIDTH\n    canvas.height = SQUARE_SIZE*GRID_HEIGHT\n\n    const clearButton = <HTMLButtonElement> select('#clearbutton')\n    clearButton.onclick = () => {\n        clearGrid()\n    }\n\n    registerInputEvents(canvas)\n    beginRender(canvas)\n}\n\nexport default init\n","import init from './init'\n\nwindow.addEventListener('DOMContentLoaded', init)\n"]}